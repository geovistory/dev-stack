# See https://docs.redpanda.com/current/get-started/quick-start/

version: '3.8'
volumes:
  postgis-logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs/postgres
      o: bind
  postgis-data: null
  redpanda1: null
  redpanda2: null
  redpanda3: null
  fuseki: null

networks:
  redpanda_network:
    driver: bridge

services:
  # Postgres Database Server with
  # access postgres from host machine: postgres://postgres:local_pw@{DOCKER_IP}:${DOCKER_PG_HOST_PORT}
  postgres:
    build:
      context: ./components/postgres
    shm_size: 1g
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: local_pw
      GEOVISTORY_DB: toolbox_db
    command: ${POSTGRES_COMMAND}
    ports:
      - ${POSTGRES_PORT}:5432
    restart: always
    volumes:
      - 'postgis-data:/var/lib/postgresql/data'
      - 'postgis-logs:/logs'
    healthcheck:
      test: ["CMD-SHELL", "test -f /var/lib/postgresql/data/ready || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 50
    networks:
      - redpanda_network

  redpanda-1:
    # build:
    #   context: ./components/redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.13
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 1
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:${REDPANDA_1_PORT}
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-1:9092,external://localhost:${REDPANDA_1_PORT}
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:${REDPANDA_PROXY_1_PORT}
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-1:8082,external://localhost:${REDPANDA_PROXY_1_PORT}
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:${REDPANDA_SCHEMA_REGISTRY_PORT}
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-1:33145
      - --advertise-rpc-addr redpanda-1:33145
    #   # Set the log segment size to 16MB instead of 128MB to save disk on local machine (16MB min. size per partition)
    #   - rpk cluster config set log_segment_size 16777216 
    ports:
      - ${REDPANDA_SCHEMA_REGISTRY_PORT}:${REDPANDA_SCHEMA_REGISTRY_PORT}
      - ${REDPANDA_PROXY_1_PORT}:${REDPANDA_PROXY_1_PORT}
      - ${REDPANDA_1_PORT}:${REDPANDA_1_PORT}
      - 19644:9644
    restart: always
    volumes:
      - redpanda1:/var/lib/redpanda/data
    networks:
      - redpanda_network
    healthcheck:
      test:
        ['CMD-SHELL', "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  redpanda-2:
    # build:
    #   context: ./components/redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.13
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 2
      - --seeds "redpanda-1:33145" 
      - --kafka-addr internal://0.0.0.0:9093,external://0.0.0.0:${REDPANDA_2_PORT}
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-2:9093,external://localhost:${REDPANDA_2_PORT}
      - --pandaproxy-addr internal://0.0.0.0:8083,external://0.0.0.0:${REDPANDA_PROXY_2_PORT}
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-2:8083,external://localhost:${REDPANDA_PROXY_2_PORT}
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-2:33145
      - --advertise-rpc-addr redpanda-2:33145
    #   # Set the log segment size to 16MB instead of 128MB to save disk on local machine (16MB min. size per partition)
    #   - rpk cluster config set log_segment_size 16777216 
    ports:
      - ${REDPANDA_PROXY_2_PORT}:${REDPANDA_PROXY_2_PORT}
      - ${REDPANDA_2_PORT}:${REDPANDA_2_PORT}
    restart: always
    volumes:
      - redpanda2:/var/lib/redpanda/data
    networks:
      - redpanda_network
    healthcheck:
      test:
        ['CMD-SHELL', "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      - redpanda-1

  redpanda-3:
    # build:
    #   context: ./components/redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.13
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 3
      - --seeds "redpanda-1:33145" 
      - --kafka-addr internal://0.0.0.0:9094,external://0.0.0.0:${REDPANDA_3_PORT}
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-3:9094,external://localhost:${REDPANDA_3_PORT}
      - --pandaproxy-addr internal://0.0.0.0:8084,external://0.0.0.0:${REDPANDA_PROXY_3_PORT}
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-3:8084,external://localhost:${REDPANDA_PROXY_3_PORT}
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-3:33145
      - --advertise-rpc-addr redpanda-3:33145
    #   # Set the log segment size to 16MB instead of 128MB to save disk on local machine (16MB min. size per partition)
    #   - rpk cluster config set log_segment_size 16777216 
    ports:
      - ${REDPANDA_PROXY_3_PORT}:${REDPANDA_PROXY_3_PORT}
      - ${REDPANDA_3_PORT}:${REDPANDA_3_PORT}
    restart: always
    volumes:
      - redpanda3:/var/lib/redpanda/data
    networks:
      - redpanda_network
    healthcheck:
      test:
        ['CMD-SHELL', "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      - redpanda-1

  console:
    image: docker.redpanda.com/redpandadata/console:v2.2.5
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-1:9092","redpanda-2:9093","redpanda-3:9094"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-1:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-1:9644"]
        connect:
          enabled: true
          clusters:
            - name: geov-connect-cluster
              url: http://connect:8083
    ports:
      - ${REDPANDA_CONSOLE_PORT}:8080
    networks:
      - redpanda_network
    depends_on:
     - redpanda-1

  connect:
    build:
      context: ./components/connect
    hostname: connect
    container_name: connect
    networks:
      - redpanda_network
    platform: 'linux/amd64'
    depends_on:
      postgres:
        condition: service_healthy
      redpanda-1:
        condition: service_started
      redpanda-2:
        condition: service_started
      redpanda-3:
        condition: service_started
    ports:
      - '8083:8083'
    environment:
      CONNECT_CONFIGURATION: |
        key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
        value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
        group.id=geov_connectors-cluster
        offset.storage.topic=_internal_connectors_offsets
        config.storage.topic=_internal_connectors_configs
        status.storage.topic=_internal_connectors_status
        config.storage.replication.factor=-1
        offset.storage.replication.factor=-1
        status.storage.replication.factor=-1
        offset.flush.interval.ms=1000
        producer.linger.ms=50
        producer.batch.size=131072
        listeners=HTTP://connect:8083
      CONNECT_BOOTSTRAP_SERVERS: redpanda-1:9092,redpanda-2:9093,redpanda-3:9094
      CONNECT_GC_LOG_ENABLED: 'false'
      CONNECT_HEAP_OPTS: -Xms512M -Xmx512M
      CONNECT_LOG_LEVEL: info

  toolbox_server:
    image: ghcr.io/geovistory/toolbox-server:0.2.7
    environment:
      # db:5432 points to service db and its cointainer port
      DATABASE_URL: postgres://postgres:local_pw@postgres:5432/toolbox_db
      GEOV_EMAIL_ADDRESS: ${GEOV_EMAIL_ADDRESS}
      GEOV_EMAIL_HOST: ${GEOV_EMAIL_HOST}
      GEOV_EMAIL_PORT: ${GEOV_EMAIL_PORT}
      GEOV_EMAIL_PASSWORD: ${GEOV_EMAIL_PASSWORD}
      SERVER_URL: http://localhost:${TOOLBOX_SERVER_PORT}
      CLIENT_URL: http://toolbox_client:4200
      PORT: '3000'
      HOST: '0.0.0.0'
    ports:
      - ${TOOLBOX_SERVER_PORT}:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - redpanda_network

  toolbox_client:
    image: ghcr.io/geovistory/toolbox-client:0.2.7
    environment:
      # db:5432 points to service db and its cointainer port
      API_URL: http://localhost:${TOOLBOX_SERVER_PORT}
      ASSETS_URL: http://localhost:${TOOLBOX_CLIENT_PORT}
    ports:
      - ${TOOLBOX_CLIENT_PORT}:80

  fuseki:
    build: 
      context: ./components/fuseki
    environment:
      ADMIN_PASSWORD: "pw123"
      JAVA_OPTIONS: "-Xmx1024m -Xms1024m"
      SIS_DATA: '/databases/apache-sis-1.2/data'
    ports:
      - ${FUSEKI_PORT}:3030
    volumes:
      - fuseki:/databases/apache-sis-1.2/data
    networks:
      - redpanda_network

  # ###################################### Kafka Streams Apps ######################################

  toolbox_streams_base_model:
    image: ghcr.io/geovistory/toolbox-streams-base-model-quarkus:0.1.0-pr-105.1
    environment:
      JDK_JAVA_OPTIONS: -Xms256m -Xmx1024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_base_model
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_base_model
      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network

  toolbox_streams_field_changes:
    image: ghcr.io/geovistory/toolbox-streams-field-change-quarkus:0.1.0-pr-103.0
    environment:
      JDK_JAVA_OPTIONS: -Xms256m -Xmx1024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_field_changes
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_field_changes
      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network

  toolbox_streams_nodes:
    image: ghcr.io/geovistory/toolbox-streams-nodes-quarkus:0.1.0-pr-86.2
    environment:
      JDK_JAVA_OPTIONS: -Xms256m -Xmx1024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_nodes
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_nodes
      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network

  toolbox_streams_statement_subject:
    image: ghcr.io/geovistory/toolbox-streams-statement-subject-quarkus:0.1.0-pr-86.2
    environment:
      JDK_JAVA_OPTIONS: -Xms256m -Xmx1024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_statement_subject
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_statement_subject
      # Topics from ts_nodes
      TS_TOPIC_NODES: ts_nodes_nodes
      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network



  toolbox_streams_statement_object:
    image: ghcr.io/geovistory/toolbox-streams-statement-object-quarkus:0.1.0-pr-86.2
    environment:
      JDK_JAVA_OPTIONS: -Xms256m -Xmx1024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_statement_object
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_statement_object
      # Topics from ts_nodes
      TS_TOPIC_NODES: ts_nodes_nodes
      # Topics from app-0a-statement-subject
      TS_TOPIC_STATEMENT_WITH_SUBJECT: ts_statement_subject_statement_with_subject

      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network

  toolbox_streams_base_config:
    image: ghcr.io/geovistory/toolbox-streams-base-config-quarkus:0.1.0-pr-86.2
    environment:
      JDK_JAVA_OPTIONS: -Xms256m -Xmx1024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_base_config
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_base_config
      # Topics from ts-base-model
      TS_TOPIC_ONTOME_PROPERTY: ts_base_model_ontome_property
      TS_TOPIC_ONTOME_CLASS: ts_base_model_ontome_class
      TS_TOPIC_ONTOME_PROPERTY_LABEL: ts_base_model_ontome_property_label
      TS_TOPIC_ONTOME_CLASS_LABEL: ts_base_model_ontome_class_label

      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network


  toolbox_streams_entity_label:
    image: ghcr.io/geovistory/toolbox-streams-entity-label-quarkus:0.1.0-pr-103.0
    environment:
      JDK_JAVA_OPTIONS: -Xms512m -Xmx2024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_entity_label
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_entity_label
      # Topics from app-0-statement-object
      TS_TOPIC_STATEMENT_WITH_ENTITY: ts_statement_object_statement_with_entity
      TS_TOPIC_STATEMENT_WITH_LITERAL: ts_statement_object_statement_with_literal
      # Topics from app-1-base-config
      TS_TOPIC_PROJECT_ENTITY_LABEL_CONFIG: ts_base_config_project_entity_label_config
      TS_TOPIC_COMMUNITY_ENTITY_LABEL_CONFIG: ts_base_config_community_entity_label_config
      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network

  toolbox_streams_analysis_statements:
    image: ghcr.io/geovistory/toolbox-streams-analysis-statements-quarkus:0.1.0-pr-93.1
    environment:
      JDK_JAVA_OPTIONS: -Xms512m -Xmx2024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_analysis_statements
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_analysis_statements
      # Topics from app-2-entity-label
      TS_TOPIC_PROJECT_STATEMENT_WITH_ENTITY: ts_entity_label_project_statement_with_entity
      TS_TOPIC_PROJECT_STATEMENT_WITH_LITERAL: ts_entity_label_project_statement_with_literal
      # Replication factor of created topics
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network


  toolbox_streams_entity:
    image: ghcr.io/geovistory/toolbox-streams-entity-quarkus:0.1.0-pr-86.3
    environment:
      JDK_JAVA_OPTIONS: -Xms512m -Xmx2024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_entity
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_entity
      # Topics from app-0-base-model     
      TS_TOPIC_ONTOME_CLASS_METADATA: ts_base_model_ontome_class_metadata
      TS_TOPIC_HAS_TYPE_PROPERTY: ts_base_model_has_type_property
      # Topics from app-1-base-config
      TS_TOPIC_PROJECT_CLASS_LABEL: ts_base_config_project_class_label           
      TS_TOPIC_COMMUNITY_CLASS_LABEL: ts_base_config_community_class_label
      # Topics from app-2-entity-label
      TS_TOPIC_PROJECT_ENTITY: ts_entity_label_project_entity
      TS_TOPIC_PROJECT_TOP_OUTGOING_STATEMENTS: ts_entity_label_project_top_outgoing_statements
      TS_TOPIC_COMMUNITY_ENTITY: ts_entity_label_community_toolbox_entity
      TS_TOPIC_COMMUNITY_TOP_OUTGOING_STATEMENTS: ts_entity_label_community_toolbox_top_outgoing_statements
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network


  toolbox_streams_fulltext:
    image: ghcr.io/geovistory/toolbox-streams-fulltext-quarkus:0.1.0-pr-86.3
    environment:
      JDK_JAVA_OPTIONS: -Xms512m -Xmx2024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_fulltext
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_fulltext
      # Topics from app-1-base-config
      TS_TOPIC_PROJECT_PROPERTY_LABEL: ts_base_config_project_property_label
      TS_TOPIC_COMMUNITY_PROPERTY_LABEL: ts_base_config_community_property_label
      # Topics from app-2-entity-label
      TS_TOPIC_PROJECT_ENTITY_WITH_LABEL_CONFIG: ts_entity_label_project_entity_with_label_config
      TS_TOPIC_PROJECT_TOP_STATEMENTS: ts_entity_label_project_top_statements
      TS_TOPIC_COMMUNITY_ENTITY_WITH_LABEL_CONFIG: ts_entity_label_community_toolbox_entity_with_label_config
      TS_TOPIC_COMMUNITY_TOP_STATEMENTS: ts_entity_label_community_toolbox_top_statements
      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network


  toolbox_streams_entity_preview:
    image: ghcr.io/geovistory/toolbox-streams-entity-preview-quarkus:0.1.0-pr-86.2
    environment:
      JDK_JAVA_OPTIONS: -Xms512m -Xmx2024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_entity_preview
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_entity_preview
      # Topics from app-2-entity-label
      TS_TOPIC_PROJECT_ENTITY: ts_entity_label_project_entity
      TS_TOPIC_PROJECT_ENTITY_LABEL: ts_entity_label_project_entity_label
      TS_TOPIC_COMMUNITY_ENTITY: ts_entity_label_community_toolbox_entity
      TS_TOPIC_COMMUNITY_ENTITY_LABEL: ts_entity_label_community_toolbox_entity_label
      # Topics from app-3-entity
      TS_TOPIC_PROJECT_ENTITY_CLASS_LABEL: ts_entity_project_entity_class_label
      TS_TOPIC_PROJECT_ENTITY_TYPE: ts_entity_project_entity_type
      TS_TOPIC_PROJECT_ENTITY_TIME_SPAN: ts_entity_project_entity_time_span
      TS_TOPIC_PROJECT_ENTITY_CLASS_METADATA: ts_entity_project_entity_class_metadata
      TS_TOPIC_COMMUNITY_ENTITY_CLASS_LABEL: ts_entity_community_toolbox_entity_class_label
      TS_TOPIC_COMMUNITY_ENTITY_TYPE: ts_entity_community_toolbox_entity_type
      TS_TOPIC_COMMUNITY_ENTITY_TIME_SPAN: ts_entity_community_toolbox_entity_time_span
      TS_TOPIC_COMMUNITY_ENTITY_CLASS_METADATA: ts_entity_community_toolbox_entity_class_metadata
      # Topics from app-3-fulltext
      TS_TOPIC_PROJECT_ENTITY_FULLTEXT: ts_fulltext_project_entity_fulltext
      TS_TOPIC_COMMUNITY_ENTITY_FULLTEXT: ts_fulltext_community_toolbox_entity_fulltext

      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network

  toolbox_streams_rdf:
    image: ghcr.io/geovistory/toolbox-streams-rdf-serializer-quarkus:0.1.0-pr-114.0
    environment:
      JDK_JAVA_OPTIONS: -Xms512m -Xmx2024m
      ROCKSDB_TOTAL_OFF_HEAP_MB: '2000'
      ROCKSDB_TOTAL_MEMTABLE_MB: '200'
      KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING: '10485760'
      KAFKA_STREAMS_COMMIT_INTERVAL_MS: '100' 
      KAFKA_STREAMS_METRICS_RECORDING_LEVEL: DEBUG
      KAFKA_STREAMS_PROCESSING_GUARANTEE: ${KAFKA_STREAMS_PROCESSING_GUARANTEE}
      TS_STATE_DIR: '/kafka-streams-state'
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: 'http://redpanda-1:9092,http://redpanda-2:9093,http://redpanda-3:9094'
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_KEY: schema.registry.url
      QUARKUS_KAFKA_STREAMS_SCHEMA_REGISTRY_URL: 'http://redpanda-1:8081'
      # Application id
      QUARKUS_KAFKA_STREAMS_APPLICATION_ID: ts_rdf
      # Prefix of topics created by debezium
      TS_INPUT_TOPIC_NAME_PREFIX: 'dev'
      # Prefix of topics created by this app
      TS_OUTPUT_TOPIC_NAME_PREFIX: ts_rdf
      # Topics from app-1-base-config
      TS_TOPIC_PROJECT_CLASS_LABEL: ts_base_config_project_class_label        
      # Topics from app-2-entity-label
      TS_TOPIC_PROJECT_STATEMENT_WITH_ENTITY: ts_entity_label_project_statement_with_entity
      TS_TOPIC_PROJECT_STATEMENT_WITH_LITERAL: ts_entity_label_project_statement_with_literal

      TS_OUTPUT_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - redpanda_network
      